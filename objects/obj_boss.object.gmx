<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boss_1_walk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0.15;

//General variables
wait = 0;
moveSpeed = -3;
currentHSpeed = moveSpeed;
stopMoving = false;
aggroZone = 250;
damage = 10;
hp = 20; //Hp on phase 1
phase = 1;
recoveryFrames = 30;//Recovery time when being hited phase 1 &amp; 2
recovery = 0;
invulnerabilityFrames = 35;//Invulnerability time on patterns phase 3
invulnerability = 0;
invulnerable = false;
transition = false;
pattern = 0;
followPlayer = false;
lightSize = 250;
//Phase 1 states
strike = false;
walk = true;
i = 0;

//Phase 2 states
endAnim = false;
phase2hp = 100;
startFlying = false;
fly = false;
flyOut = false;
flyMid = false;
launch = true;
rotate = false;
attack = false;
//Animations variables
yMaxLimit = 280;
yMinLimit = 270;
xMinLimit = view_xview + 200;
xMaxLimit = view_wview - 200;
currentVSpeed = 0;
rotationSpeed = 0;
currentRotation = 0;
rotationDir = -1;
flyOutDir = 1;
//Attack
prevPattern = -1;
nextAttack = 2;
stopPattern = 25;

//Phase 3 states
phase3hp = 200;
run = false;
debug = false;
rangeAttack = false;
pattern1yPos = 200;
pattern1xPos[0, 0] = 50;
pattern1xPos[0, 1] = 250;
pattern1xPos[0, 2] = 450;
pattern1xPos[0, 3] = 650;
pattern1xPos[1, 0] = 0;
pattern1xPos[1, 1] = 200;
pattern1xPos[1, 2] = 400;
pattern1xPos[1, 3] = 600;
attackCount = 0;
death = false;

//Lighting variables
darkness = 200;
darknessMin = 150;
lightFade = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lighting
if(obj_lighting.dark){
    Lighting(lightSize, c_white, c_black);
}
if(transition) lightFade = true;
if(lightFade){
    if(phase == 2){
        if(darkness &gt; darknessMin){
            darkness --;
            obj_lighting.color = make_color_rgb(darkness, darkness, darkness);
        }
        else {
            lightFade = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Phase 1 : ol' weirdo walkin'
if(phase == 1){
    //When he's walking and the player is nearby
    playerInAggroZone = obj_character.x &gt;= x - aggroZone &amp;&amp; obj_character.x &lt;= x + aggroZone;
    if(playerInAggroZone &amp;&amp; walk){
        walk = false;
        strike = true;
        wait = -1;
    }
    
    //Striking pattern : run towards the player, attacks him when close
    if(strike){
        //First time the player is in the aggro zone while a walk pattern
        if(wait == -1){
            sprite_index = spr_boss_1_rush;
            image_speed = 0.3;
            image_xscale = behindPlayer();
            currentHSpeed = (moveSpeed - 2) * behindPlayer();
            wait = 60; //Don't run forever
        }
        //If the player is close : attacks then wait
        if(distance_to_point(obj_character.x, obj_character.y) &lt; 40){
            if(sprite_index == spr_boss_1_rush){
                sprite_index = spr_boss_1_attack;
                image_speed = 0.5;
            }
            currentHSpeed = 0;
            wait = 40;
        }
        if(sprite_index == spr_boss_1_attack
         &amp;&amp; endAnimation()){
                sprite_index = spr_boss_1_walk;
                image_speed = 0;
                image_index = 0;
        }
        if(wait &gt; 0){
            wait --;
        }
        else if(wait == 0){
            if (playerInAggroZone){ //If in the aggro zone : run again !
                wait = -1;
            }
            else { //If not, continue walking
                walk = true;
                currentHSpeed = moveSpeed;
                sprite_index = spr_boss_1_walk;
            }
        }
    }
    //walking around the room
    if(walk){
        if(wait &gt; 0){//The boss will stay still or walk while wait is over 0
            wait--;
        }
        else {
            if(currentHSpeed != 0){//If already moving, stop moving
                image_index = 0;
                image_speed = 0;
                currentHSpeed = 0;
                wait = irandom_range(10, 40);
            }
            else{//If not moving, start moving in a random direction on a random distance
                if(irandom_range(1, 2) == 1) dir = 1;
                else dir = -1;
                currentHSpeed = moveSpeed * dir;
                image_xscale = dir;
                image_speed = 0.16;
                wait = irandom_range(10, 100);//Random distance range
            }
        }
    }
    
    if(hp &lt;= 0 &amp;&amp; !transition){//ded
        walk = false;
        strike = false;
        transition = true;
        currentHSpeed = 0;
        sprite_index = spr_boss_1_transform;
        image_index = 0;
        image_speed = 0.4;
        recovery = 0;

    }
    
    //Animations towards phase 2
    if(transition){
        invulnerable = true;
        hp = 10;
        if(endAnimation()){
            image_speed = 0;
            phase = 1.5;
            transition = false;
        }
    }
    //Turn over when it hits a wall
    if(place_meeting(x + hspeed, y, obj_ground01)){
        currentHSpeed *= -1;
        image_xscale *= -1;
    }
    hspeed = currentHSpeed;
}
else if(phase == 1.5){
    if(y &gt; 450){
        vspeed += -0.5;
    }
    else{
        vspeed = 0;
        invulnerable = false;
        sprite_index = spr_boss_2_wait;
        image_speed = 0.3;
    }
    if(hp &lt;= 0){
        transition = true;
        recovery = 0;
    }
    if(transition){
        instance_create(x, y, obj_boss_heart);
        sprite_index = -1;
        image_index = 0;
        image_speed = 0;
        phase = 2;
        transition = false;
        spawning = true;
        wait = 0;
        hp = phase2hp;
    }
}

 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Phase 2 : UFO
if(phase == 2){
    //Launching : smoothly fly to yMaxLimit and then stop
    if(launch &amp;&amp; wait == 0){
        invulnerable = true;
        yMaxLimit = 280;
        if(y &gt; yMaxLimit){
            image_alpha = 1;
            currentVSpeed -= 0.05;
            if(spawning){
                sprite_index = spr_boss2_armor_spawn;
                image_speed = 0.07;
                obj_boss_heart.image_speed = 0.06;
                spawning = false;
            }
        }
        else{
            launch = false;
            startFlying = true;
            wait = 40;
            rotationSpeed = 4;
            yMaxLimit += 10;
            yMinLimit = 270;
            xMinLimit = view_xview + 200;
            xMaxLimit = view_wview - 200;
            currentVSpeed = 0;
            currentHSpeed = 0;
            sprite_index = spr_boss2_armor;
            obj_boss_heart.image_speed = 0;
        }
    }
    
    //Start Flying : begin to fly
    if(startFlying &amp;&amp; wait == 0){
        obj_boss_heart.image_speed = 0.3;
        image_speed = 0.3;
        rotate = true;
        startFlying = false;
        fly = true;
        currentHSpeed = 15;
        currentVSpeed = 1;        
        invulnerable = false;
    }
    
    //Flying : go back and forth horizontally
    if(fly &amp;&amp; wait == 0){
        //Waiting time between two patterns : go back and forth horizontally
        if(!flyOut &amp;&amp; !flyMid){
            if(x &gt; xMaxLimit){
            if(currentHSpeed &gt; -15) currentHSpeed -= 1;
                flyOutDir = -1;
            }
            else if(x &lt; xMinLimit){
                if(currentHSpeed &lt; 15) currentHSpeed += 1;
                flyOutDir = 1;
            }
            if(y &gt; yMaxLimit){
                currentVSpeed -= 0.3;
            }
            else if(y &lt; yMinLimit){
                currentVSpeed += 0.3;
            }
            //Attack cooldown
            if(currentHSpeed == 0) nextAttack--;
        }
        else if (flyOut &amp;&amp; !flyMid){//Fly Out : go out of the room
            //Into the room : accelerate
            if((x &gt; view_xview - 100 &amp;&amp; flyOutDir == -1)
            || (x &lt; view_wview + 100 &amp;&amp; flyOutDir == 1)){
                currentHSpeed *= 1.2;
                currentVSpeed *= 1.2;
            }
            else{ //Out of the room : pattern instanciation
                fly = false;
                flyOut = false;
                attack = true;
                if(pattern == 0){
                    currentHSpeed = -8 * flyOutDir;
                    currentVSpeed = -40;
                    yMaxLimit = 652;
                    yMinLimit = 640;
                    xMaxLimit = view_wview;
                    xMinLimit = view_xview;
                    y = yMaxLimit;
                    if(flyOutDir == -1) x = -10;
                    else x = view_wview + 10
                    image_angle = 90;
                    rotate = false;
                }
                else if(pattern == 1){
                    currentHSpeed = 0.3;
                    currentVSpeed = 0;
                    y = irandom_range(650, 726);
                    xMaxLimit = view_wview + 100;
                    xMinLimit = view_xview - 100;
                    image_angle = 0;
                }
            }
        }
        else if (flyMid){ //Fly mid : position itself in the middle of the room (x)
            if(x &gt;= view_wview/2 + 100 || x &lt;= view_wview/2 - 100){
                currentHSpeed += 1 * flyOutDir;
            }
            else {
                if(currentHSpeed != 0)
                    currentHSpeed -= 5 * flyOutDir;
                else{
                    invulnerable = true;
                    currentHSpeed = 0;
                    if(rotate &amp;&amp; (abs(image_angle) % 180) &lt;= 92 &amp;&amp; (abs(image_angle) % 180) &gt;= 88){
                        image_angle = 90;
                        wait = 30;
                        rotate = false;
                    }
                    else if(!rotate &amp;&amp; wait == 0){
                        boss[0] = id;
                        boss[1] = instance_create(x, y, obj_boss_illusion);
                        boss[2] = instance_create(x, y, obj_boss_illusion);
                        fly = false;
                        attack = true;
                    }
                }
            }
        }
    }
    
    //Attack instanciation
    if(nextAttack == 0){
        nextAttack = 3;
        pattern = irandom(2);
        //Control on the randomize : a pattern is done max once in a row
        while(prevPattern == pattern){
            pattern = irandom(2);
        }
        prevPattern = pattern;
        
        //Before the beginning of the pattern
        if(pattern == 0 || pattern == 1){
            flyOut = true;
            currentHSpeed = 0.5 * flyOutDir;
            currentVSpeed = 0.05;
            if(pattern == 0) stopPattern = 20;
            else stopPattern = 5;
        }
        if(pattern == 2){
            flyMid = true;
            currentHSpeed = 1 * flyOutDir;
            currentVSpeed = 0;
            stopPattern = 3;
        }
    }
    
    //Attack : do the random picked pattern
    if(attack){
        //Pattern 1 : jump on the ground
        if(pattern == 0){
            //Jump around
            if(y &gt; yMaxLimit){
                currentVSpeed = -40;
                currentHSpeed = 12 * sign(currentHSpeed);
                stopPattern --;
            }
            else if(y &lt; yMinLimit &amp;&amp; currentVSpeed &lt; 40){
                currentVSpeed += 4;
                rotate = true;
                rotationSpeed = 9;
            }
            else rotate = false;
            
            //Go in the other way
            if(x &lt; xMinLimit &amp;&amp; (abs(image_angle) % 180) == 90){
                rotationDir = -1;
                currentHSpeed = 5;
            }
            else if(x &gt; xMaxLimit &amp;&amp; (abs(image_angle) % 180) == 90){
                rotationDir = 1;
                currentHSpeed = -5;
            }
        }
        //Pattern 2 : go back and forth horizontally really fastly
        if(pattern == 1){
            //Go in the other way
            if(x &lt; xMinLimit || x &gt; xMaxLimit){
                y = irandom_range(650, 726);
                rotationSpeed = 4;                
                if(x &lt; xMinLimit){
                    currentHSpeed = 0.5;
                    x = xMinLimit + 50;
                    stopPattern--;
                }
                else if (x &gt; xMaxLimit){
                    currentHSpeed = -0.5;
                    x = xMaxLimit - 50;
                    stopPattern--;
                }
            }
            currentHSpeed *= 1.06;
            rotationSpeed *= 1.0;
        }
        if(pattern == 2){//Fall under the player with 2 illusions
            //Animation before the true attack
            if(flyMid &amp;&amp; wait == 0){
                if(boss[1].x &gt; view_wview/2 - 200){
                    for(i = 1; i &lt;= 2; i++){
                        boss[i].rotationSpeed = rotationSpeed;
                    }
                    boss[1].currentHSpeed += -0.1;
                    boss[2].currentHSpeed += 0.1;
                    boss[1].rotationDir = -1;
                }
                else if(boss[1].x &gt;= view_wview/2 - 200 + boss[1].hspeed
                        &amp;&amp; boss[1].x &lt;= view_wview/2 - 200 - boss[1].hspeed){
                    for(i = 0; i &lt; 3; i++){
                        boss[i].currentVSpeed = -1;
                    }
                }
                else{
                    for(i = 0; i &lt; 3; i++){
                        boss[i].currentVSpeed *= 1.1;
                    }
                    boss[1].currentHSpeed *= 1.08;
                    boss[2].currentHSpeed *= 1.08;
                }
                if(boss[1].y &lt; - 1000){
                    for(i = 0; i &lt; 3; i++){
                        boss[i].rotate = false;
                        boss[i].image_angle = 90;
                        boss[i].speed = 0;
                        boss[i].followPlayer = true;
                    }
                    invulnerable = false;
                    flyMid = false;
                    wait = 210;
                    next = irandom(2);
                }
            }
            else{//Attacking : fall on the ground
                if(wait &gt; 0){
                    if(wait % 70 != 0){//Prepare to fall
                        if(boss[next % 3].y &lt; -1000){
                            boss[next % 3].x = irandom_range(440, 840);
                            boss[next % 3].y = 0;
                        }
                        else if(boss[next % 3].y &lt; 400){//Falling
                            with boss[next % 3]{
                                motion_add(point_direction(x, y, obj_yellow.x, obj_yellow.y), 1.2);
                            }
                        }
                        if(boss[next % 3].y &gt; 700 - speed){//Hit the ground
                            if(boss[next % 3] == id){
                                y += vspeed * 2;
                                x += hspeed * 2;
                            }
                            boss[next % 3].currentVSpeed = 0;
                            boss[next % 3].currentHSpeed = 0;
                            boss[next % 3].followPlayer = false;
                            boss[next % 3].rotate = false;
                        }
                        if(wait % 70 == 1){//Next diamond falling
                            stopPattern--
                            if(stopPattern == 0){//Illusions disappear
                                for(i = 1; i &lt; 3; i++){
                                    boss[i].isFading = true;
                                }
                            }
                        }
                    }
                    else{
                        next++;
                    }
                }
            }
        }
        //Pattern is finished, begin to fly again
        if(stopPattern == 0){
            wait = 10;
            launch = true;
            attack = false;
            currentVSpeed = -5;
            currentHSpeed = 0;
            rotate = false;
        }
    }
    
    if(hp &lt;= 0 &amp;&amp; !transition){//Ded
        //When dies, go in the middle of the room
        if(!((y &gt; 256 - 10 &amp;&amp; y &lt; 256 + 10)
        &amp;&amp; (x &gt; 640 - 10 &amp;&amp; x &lt; 640 + 10))) move_towards_point(640, 256, 10);
        else{
            transition = true;
            vspeed = 0;
        }
        rotate = false;
        fly = false;
        attack = false;
        launch = false;
        currentHSpeed = 0;
        currentVSpeed = 0;
        followPlayer = true;
        if(instance_exists(obj_boss_illusion))
            with obj_boss_illusion instance_destroy();
        wait = 10;
        invulnerable = true;
    }
    
    if(transition){//Death animations
            with (obj_boss_heart){
                if(y &gt;= view_hview - 125){//When the heart touches the ground
                    //Land
                    if(sprite_index == spr_boss_2_death){
                        vspeed = 0;
                        sprite_index = spr_boss_2_land;
                        image_speed = 0.5;
                    }//Crawl
                    else if(sprite_index == spr_boss_2_land &amp;&amp; endAnimation()){
                        audio_sound_gain(snd_boss_phase2, 0, ((view_wview - obj_boss.aggroZone - x)/5) * room_speed);
                        sprite_index = spr_boss_2_crawl;
                        y += 115;
                        hspeed = 5;
                        image_speed = 0.5;
                    }//Transform
                    else if(sprite_index == spr_boss_2_crawl &amp;&amp; x &gt; view_wview - obj_boss.aggroZone){
                        sprite_index = spr_boss_2_transform;
                        audio_play_sound(snd_boss_phase3, 10, true);
                        image_speed = 0.4;
                        image_index = 0;
                        hspeed = 0;
                        show_debug_message("bef" + string(x)+", "+string(y));
                    }//End of transformation, phase 3 !
                    else if(sprite_index == spr_boss_2_transform &amp;&amp; endAnimation()){
                        with(obj_boss){
                            x = 1032;
                            y = 665;
                            show_debug_message("af" + string(x)+", "+string(y));
                            sprite_index = spr_boss_3_walk;
                            image_angle = 0;
                            currentVSpeed = 0;
                            currentHSpeed = -5;
                            nextAttack = 1;
                            lightSize = 400;
                            transition = false;
                            aggroZone = view_wview - 500;
                            walk = true;
                            strike = false;
                            invulnerable = false;
                            phase = 3;
                            hp = phase3hp;
                        }
                        instance_destroy();
                    }
                }
                else if(obj_boss.wait &gt; 0){//The shield disappear, and the heart tranform into a drop
                    obj_boss.sprite_index = -1;
                    sprite_index = spr_boss_2_death;
                    image_speed = 0.5;
                    rotate = false;
                    image_angle = 0;
                }//Then it falls
                else if(endAnimation()){
                    vspeed = 15;
                    image_speed = 0;
                }
            }
        
    }
    
    //Rotate : rotate the sprite
    if(rotate){
        image_angle += rotationSpeed * rotationDir;
        image_angle = image_angle % 360;
    }
    
    if(wait &gt; 0) wait--;
    
    if(!followPlayer){
        hspeed = currentHSpeed;
        vspeed = currentVSpeed;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Phase 3 : true boss
if(phase == 3 &amp;&amp; !death){
    if(debug){
        x = 1000;
        y = 800 - 128;
        sprite_index = spr_boss_3_walk;
        image_speed = 0.25;
        aggroZone = view_wview - 400;
        currentHSpeed = -5;
        debug = false;
        pattern = 0;
        stopPattern = 2;
        nextAttack = 1;
        lightSize = 450;
        hp = 10;
    }
    
    
    playerInAggroZone = obj_character.x + 100 &gt;= aggroZone;
    if(playerInAggroZone &amp;&amp; !rangeAttack &amp;&amp; !strike){
        walk = false;
        run = true;
    }

    if(walk){
        if(place_meeting(x + hspeed, y, obj_ground01)){
            currentHSpeed = -5;
            nextAttack --;
        }
        else if(x + hspeed &lt; aggroZone){
            currentHSpeed = 5;
            nextAttack --;
        }
    }
    
    //Player is in the aggroZone : run towards him
    if(run){//Run towards the player and hit him
        if(x &gt; aggroZone){
            //When close to the player : attack
            if(distance_to_point(obj_character.x, y) &lt; 50){
                sprite_index = spr_boss_3_strike;
                image_index = 0;
                image_speed = 0.7;
                strike = true;
                run = false;
                currentHSpeed = -1;
                wait = 30
            }
            else if(distance_to_point(obj_character.x, y) &gt;= 50){
                currentHSpeed = -6;
            }
        }
        else{
            run = false;
            walk = true;
            currentHSpeed = 5;    
        }
    }
    
    //Melee attack
    if(strike){
        if(sprite_index = spr_boss_3_strike &amp;&amp; endAnimation()){
            sprite_index = spr_boss_3_walk;
            wait = 15;
            image_speed = 0.25;
        }
        else if(wait == 0){
            image_speed = 0.7;
            sprite_index = spr_boss_3_strike2;
        }
        if(x &lt; aggroZone || (sprite_index == spr_boss_3_strike2 &amp;&amp; endAnimation())){
            currentHSpeed = 0;
            if(endAnimation()){
                image_speed = 0.25;
                strike = false;
                nextAttack = 0;
            }
        }
    }
    if(nextAttack == 0){
        i = 0;
        wait = 0;
        rangeAttack = true;
        walk = false;
        strike = false;
        invulnerable = true;
        pattern = irandom(1)
        nextAttack = 1;
        currentHSpeed = 0;
        stopPattern = 3;
        if(hp &gt; 100) attackCount = 3;
        else attackCount = 5;
        sprite_index = spr_boss_3_attack1;
        image_speed = 0.2;
        if(pattern == 1) pos = irandom(1);
    }
    
    //Range Attack : attack with magic
    if(rangeAttack){
        if(pattern == 0){//Summon 3 bullets
            if(wait == 0 &amp;&amp; i &lt; 3){
                instance_create(x + 40, y - 60, obj_boss_orb);
                wait = 10;
                i++;
            }
            if(hp &lt; 100){
                if(i == 3 &amp;&amp; sprite_index = spr_boss_3_attack1){
                    image_index = 0;
                    image_speed = 0.2;
                    sprite_index = spr_boss_3_blast;
                }
                if(sprite_index = spr_boss_3_blast &amp;&amp; endAnimation()){
                    image_speed = 0.25;
                    sprite_index = spr_boss_3_walk;
                }
                else if(sprite_index = spr_boss_3_blast &amp;&amp; image_index &gt; 12){
                    image_speed = 0.7;
                }
            }
            if(!instance_exists(obj_boss_orb)) stopPattern = 0;
        }
        if(pattern == 1){//Summon 4 lasers
            if(wait == 0 &amp;&amp; i &lt; 4){
                ray[i] = instance_create(pattern1xPos[pos, i], pattern1yPos, obj_boss_ray);
                wait = 10
                i++;
                if(i == 4){//And 3 balls
                    for(i = 0; i &lt; 3; i ++){
                        ball = instance_create(pattern1xPos[pos, i] + 120, pattern1yPos - (150 + i * 2), obj_boss_ball);
                        if(i == 2){
                            ball.rand = 0;
                            ball.sprite_index = spr_boss_3_ball2;
                        }
                    }
                    i = 4;
                }
            }
            if(!instance_exists(obj_boss_ray)) stopPattern = 0;
        }
        //Attacked finished, return walking
        if(stopPattern == 0){
            i = 0;
            walk = true;
            rangeAttack = false;
            invulnerable = false;
            if(x &gt;= view_wview - 200) currentHSpeed = -5;
            else currentHSpeed = 5;
            sprite_index = spr_boss_3_walk;
            image_speed = 0.25;
        }
        //Loop on the end of the summon animation
        if(image_index &gt; 14 &amp;&amp; (pattern == 1 || pattern == 0 &amp;&amp; hp &gt; 100))
            image_index = 6;
    }
    
    if(hp &lt;= 0){
        death = true;
        strike = false;
        walk = false;
        run = false;
        currentHSpeed = 0;
        image_index = 0;
        invulnerable = true;
        recovery = 0;
        sprite_index = spr_boss_3_death;
        image_speed = 0.3;
        hp = 1;
    }
    
    if(wait &gt; 0) wait --;
    hspeed = currentHSpeed;
    //show_debug_message(nextAttack);
}
else if(death){
    if(instance_exists(obj_boss_ray)) with (obj_boss_ray) instance_destroy();
    if(instance_exists(obj_boss_ball)) with (obj_boss_ball) instance_destroy();
    if(instance_exists(obj_boss_orb)) with (obj_boss_orb) instance_destroy();
    if(endAnimation()){
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hitting and being hitted
if(recovery == 0){
    if(!invulnerable){
        if(touchWeapon() &amp;&amp; obj_character.strike){
            hp -= 10;
            recovery = recoveryFrames;
        }
        if(place_meeting(x, y, obj_bullet)){
            bullet = instance_place(x, y, obj_bullet);
            with(bullet) instance_destroy();
            if(phase &lt;= 2){
                hp -= 10;
                recovery = recoveryFrames;
            }
        }
    }
    if(place_meeting(x, y, obj_boss_ball) &amp;&amp; !obj_boss_ball.death){
        ball = instance_place(x, y, obj_boss_ball);
        hp -= 30;
        recovery = recoveryFrames;
        with (ball){
            if(!death)
                image_index = 0;
            sprite_index = spr_ball2_destroy;
            death = true;
            hsp = 0;
        }
    }
}
if(recovery &gt; 0){
    if(phase != 2 || (phase == 2 &amp;&amp; attack)){//Flicker on hit
        if(recovery % 6 &gt;= 3 &amp;&amp; recovery % 6 &lt;= 6) image_alpha = 0; 
        else image_alpha = 1;
    }
    else if (phase == 2 &amp;&amp; fly){//Rotate faster on second phase
        rotationSpeed = 40;
        rotationDir = 1;
        if(recovery == 1){
            rotationSpeed = 4;
            rotationDir = -1;
        }
    }
    recovery --;
}

if(invulnerable &amp;&amp; recovery == 0){
    image_alpha = 1;
    rotationSpeed = 4;
}

if(place_meeting(x, y, obj_character) &amp;&amp; !obj_character.strike
    || place_meeting(x, y, obj_yellow)){
    obj_character.hit = true;
    obj_character.ennemy = id;
    obj_character.damage = damage;
    obj_character.enemyBehind = behindPlayer();
    if(phase == 3){
        obj_character.cantMove = 20;
        obj_character.vsp = -10;
        obj_character.hsp = -10;
    }
}
if (place_meeting(x,y, obj_magicshield)){
    if(!place_meeting(x + behindPlayer() * 100,y, obj_ground01)){
        x += behindPlayer() * 20;
    }
    audio_play_sound(snd_magicshield_hit, 10, false);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
