<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_deactivate_object(object_index);

//This determines what the enemy will do,
//can be used in the creation event on each type of enemy
isSpawning = true;
isProjectile = false;
applyGravity = true;
followPlayer = true;
flying = false;

//Intern state of the enemy
invulnerability = -1;
attack = true;
death = false;
touchWeapon = collision_rectangle(obj_character.x + (36 * obj_character.image_xscale),
                                    obj_character.y,
                                    obj_character.x + (78 * obj_character.image_xscale),
                                    obj_character.y + 20,
                                    id, true, false);
touchShield = collision_rectangle(obj_character.x + (26 * obj_character.image_xscale),
                                  obj_character.y - 81,
                                  obj_character.x + (40 * obj_character.image_xscale),
                                  obj_character.y - 30, id, true, false)

//Instanciation, it will get stats, sprites and sound
//Used with scripts getEnemyAnim, getEnemyStat and getEnemySound
anims = getEnemyAnim();
animationSpeed = anims[0];
spawnSprite = anims[1];
sprite = anims[2];
hitSprite = anims[3];
deathSprite = anims[4];

stats = getEnemyStat();
hsp = stats[0];
hp = stats[1];
gunRes = stats[2];
damage = stats[3];
vsp = 0;
sounds = getEnemySound();
spawnSound = sounds[0];
attackSound = sounds[1];
touchPlayerSound = sounds[2];
hitedSound = sounds[3];
deathSound = sounds[4];

image_speed = animationSpeed;
image_xscale = behindPlayer();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enemy behaviour
if(isSpawning){ //Animate the enemy spawn
    if(!audio_is_playing(spawnSound)) audio_play_sound(spawnSound, 10, false);
    attack = false;
    sprite_index = spawnSprite;
    image_speed = 0.3;
    if (image_index &gt;= sprite_get_number(spawnSprite) - image_speed){
        isSpawning = false;
        attack = true;
        sprite_index = sprite;
        mask_index = sprite;
        image_speed = animationSpeed;
    }
}
if (attack){//Normal behaviour, between spawn and death
    //Checks if touch the chainsaw
    touchWeapon = collision_rectangle(obj_character.x + (36 * obj_character.image_xscale),
                                      obj_character.y,
                                      obj_character.x + (78 * obj_character.image_xscale),
                                      obj_character.y + 20,
                                      id, true, false);
    //Checks if touch the upper shield
    touchShield = collision_rectangle(obj_character.x + (26 * obj_character.image_xscale) - hsp,
                                      obj_character.y - 81,
                                      obj_character.x + (40 * obj_character.image_xscale) - hsp,
                                      obj_character.y - 30, id, true, false)
                                    
                                    
    if(followPlayer) {// Se tourne et va vers le joueur.
        if(x &lt; obj_character.x - 150 || x &gt; obj_character.x + 150){
            move_towards_point(obj_character.x, obj_character.y, hsp);
            id.image_xscale = behindPlayer();
        }
    }
    else{
        hspeed = hsp;
    }

    //Gravity
    if(applyGravity){
        if(!place_meeting(x, y + 2, obj_ground01) || place_meeting(x + 2, y - 2, obj_ground01)){
            vspeed = 5;
            hspeed = 0;
        }
        else if(place_meeting(x, y + 2, obj_ground01)){
            vspeed = 0;
        }
        //if it's on the border of precipice, stop moving
        if(place_meeting(x - (10 * behindPlayer()), y + 100, obj_water))
            hspeed = 0;
    }

    //If touched by a bullet
    if(place_meeting(x,y, obj_bullet) &amp;&amp; invulnerability == -1){
        bullet = instance_place(x, y, obj_bullet);
        with(bullet) instance_destroy();
        audio_play_sound(hitedSound, 10, false)
        invulnerability = 5;
        if(hp &gt; obj_character.gunDamage * gunRes &amp;&amp; gunRes != 0){
            sprite_index = hitSprite;
            if(!place_meeting(x + behindPlayer() * 15, y - 1, obj_ground01)){
                x += behindPlayer() * 15;
            }
            y -= 5
        }
        hp -= obj_character.gunDamage * gunRes;
    }
    
    //If touched by the chainsaw
    if(touchWeapon &amp;&amp; obj_character.strike &amp;&amp; invulnerability == -1){    
        audio_play_sound(hitedSound, 10, false)
        invulnerability = 8;
        if(hp &gt; obj_character.damage){
            sprite_index = hitSprite;
            if(!flying){ //If not flying, little push back
                if(!place_meeting(x + behindPlayer() * 35, y - 1, obj_ground01)){
                    x += behindPlayer() * 35;
                }
                y -= 25
            }
            hspeed = 0;
        }
        hp -= obj_character.damage;        
    } //If hits the character while not attacking
    else if(place_meeting(x,y,obj_character) || place_meeting(x,y,obj_yellow)
            &amp;&amp; (!obj_character.redprotect || !touchShield)){
        obj_character.hit = true;
        obj_character.ennemy = id;
        obj_character.damage = damage;
        obj_character.enemyBehind = behindPlayer();
    }

    //Short invulnerability after being striked
    if(invulnerability &gt; 0){
        invulnerability--;
        hspeed = 0;
    }
    else if(invulnerability == 0){
        sprite_index = sprite;
        invulnerability--
    }
    
    //Plouf !
    if (place_meeting(x,y,obj_water)){
        hspeed = 0;
        audio_play_sound(snd_plouf, 10, false);
        instance_destroy();
    }
    //Boing !
    if (place_meeting(x,y, obj_magicshield)){
        if(!place_meeting(x + behindPlayer() * 100,y, obj_ground01)){
            x += behindPlayer() * 100;
        }
        y -= 20;
    }

    if(!audio_is_playing(attackSound)) audio_play_sound(attackSound, 10, false);
    
    if(hp &lt;= 0) {
        death = true;
        attack = false;
        image_index = 0;
        hspeed = 0;
    }
}

// Death animation 
if(death){
    if(!audio_is_playing(deathSound)) audio_play_sound(deathSound, 10, false);
    sprite_index = deathSprite;
    image_speed = 0.5;
    if(flying){ //Fall on the ground
        vspeed += 0.5;
        hspeed = 5 * sign(hsp);
        if(image_index == sprite_get_number(deathSprite) - 1){
            image_speed = 0;
        }
        if(y &gt; room_height){
            instance_destroy();
        }
    }
    else if(image_index == sprite_get_number(deathSprite) - image_speed){
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
