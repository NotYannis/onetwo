<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_red</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Movements variables
hsp = 0;
vsp = 0;
grav = 1;
grounded = true;
jumping = false;
walking = false;
canDoubleJump = true;
hColl = false;

//Attack and stats
gasFilling = false;
gasbar = 100;
hp = 100;
damage = 10;
gunDamage = 10;
hit = false;
invulnerability = 1;
strike = false;
redprotect = false;

//View
var lSet, lPos, rSet, rPos;
viewPos = 0;
viewUpdate = true; rTrigger = false; lTrigger = false;
view_xview = 0;

//Deactivation of arena triggers
arenaTime = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lighting and objects activation

if (obj_lighting.dark = true){
    Lighting(360, c_white, c_black);
}


instance_activate_region(view_xview, view_yview, view_wview, view_hview, true);
if(!arenaTime){
    instance_deactivate_object(obj_enemy_trigger);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attack and Hit
if (keyboard_check(vk_numpad1) &amp;&amp; (gasbar &gt; 0) &amp;&amp; !gasFilling){
    if (!audio_is_playing(snd_chainsaw)) audio_play_sound(snd_chainsaw, 10, false);   
    strike = true;  
    gasbar -= 5;
}
else if((!keyboard_check(vk_numpad1) &amp;&amp; gasbar &lt;=100) || gasFilling){
    gasbar += 2;
}

if(gasbar &lt;= 0){ //If the bar hit 0, you can't attack while refilling it to 100
    gasFilling = true;
    strike = false;
}
else if(gasbar &gt;= 100){
    gasFilling = false;
}

if(!keyboard_check(vk_numpad1)){
    strike = false;
}

//Hit
    
//Apply the hit animation, and invulnerability
if (hit &amp;&amp; invulnerability &lt;= 1){
    hp -= damage;
    invulnerability = room_speed*0.9;

    //Go back in the good direction if there is nothing behind
    if(!place_meeting(x - enemyBehind * 25, y, obj_ground01))
        x -= enemyBehind * 25;
    y -= 25
    
    if (!audio_is_playing(snd_ennemy1_hit))
        audio_play_sound(snd_ennemy1_hit, 10, false);

    if(redprotect &amp;&amp; place_meeting(obj_yellow.x, obj_yellow.y, obj_ennemy)){
            audio_play_sound(snd_shield, 10, false);
    }
}
if (invulnerability &gt;= 0){
    hit = false;
    invulnerability--;
}


// Death
if (hp &lt;= 0){
    room_goto(Game_Over);
}

//Cheat code
if(keyboard_check(vk_numpad8)) hp = 1000;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement, collisions and animatons

// Move 

if (keyboard_check(vk_right)){
    hsp = 5;
    walking = true;
    image_xscale = 1;
}
else if (keyboard_check(vk_left)){
    hsp = -5;
    walking = true;
    image_xscale = -1;
}

else{
    sprite_index = spr_red;
    image_speed = 0.2;
}

if ((!keyboard_check(vk_left) &amp;&amp; !keyboard_check(vk_right)) 
    || (keyboard_check(vk_left) &amp;&amp; keyboard_check(vk_right) || redprotect))  {
    hsp = 0;
    walking = false;
}

//---------------------------------------
//------------------Animations-----------
//---------------------------------------

if (jumping){
    sprite_index = spr_red_jump;
}
else{
    sprite_index = spr_red
}

if (walking &amp;&amp; !jumping){
    image_speed = 0.5;
    sprite_index = spr_red_walk;
    if (strike){
        walking = false;
        hsp = 0;
        image_speed = 0.5;
        sprite_index = spr_red_hit;
    }
}

if (strike){
    image_speed = 0.5;
    sprite_index = spr_red_hit;
}

if (redprotect){
    sprite_index = spr_red_protect;
}
//---------------------------------------
// --------------Collisions--------------
//---------------------------------------
platform = instance_place(x,y + vsp + 1,obj_platform)

hColl = place_meeting(x+hsp,y,obj_ground01) ;
grounded = place_meeting(x,y + vsp + 1,obj_ground01)
         || ((place_meeting(x,y+ vsp + 1,obj_platform) &amp;&amp; vsp &gt;=0)
                &amp;&amp; (platform != noone  &amp;&amp; !place_meeting(x + hsp, y, obj_platform)));
// Horizontal
if (hColl) {
    if(!place_meeting(x+sign(hsp),y,obj_ground01)){
        x += sign(hsp);
    }
    hsp = 0;
}

// Vertical
if (grounded) {
    canDoubleJump = true;
    if(!hColl){ //Shouldn't move vertically only if its grounded
        vsp = 0;
    }
}

//----------- Gravity and jump ------------
//-----------------------------------------
if (grounded) { // Player on the ground so he can jump. 
    jumping = false;
    vsp = 0;
    if (keyboard_check(vk_space)){
        jumping = true;
        vsp = -25;
        grounded = false;
    }
}
else{
    vsp += grav;
}

y += vsp; // Set the variable y, so that the player vertical movements are set.
x += hsp; // Set the variable x, so that the player can move. 

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Yellow protection

if (keyboard_check(vk_numpad3)){
    redprotect = true;
}
else{
    redprotect = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///View instanciation
if(!arenaTime){
    if(viewUpdate){
        lBor = view_xview + 362; //Left limit, when the camera reposition itself
        lPos = view_xview + 612; //Position of the camera when the player walks to the left
        rBor = view_xview + 662; //Right limit, when the camera reposition itself
        rPos = view_xview + 412; //Position of the camera when the player walks to the right
        if(x &gt; rPos &amp;&amp; rTrigger) viewPos += 15;
        else rTrigger = false;
        if(x &lt; lPos &amp;&amp; lTrigger) viewPos -= 15;
        else lTrigger = false;
    }
    
    //View behaviour, depend of the direction of the player
    if (keyboard_check(vk_right)){
        if(x &gt;= rPos - 5 &amp;&amp; x &lt;= rPos + 5){
            viewUpdate = true;
            rTrigger = false;
            viewPos = x - 412;
        }
        else if(x &gt;= rBor){
            rTrigger = true
        }
    }
    else if (keyboard_check(vk_left)){
        if(x &gt;= lPos - 5 &amp;&amp; x &lt;= lPos + 5){
            viewUpdate = true;
            lTrigger = false;;
            viewPos = x - 612;
        }
        else if(x &lt;= lBor){
            lTrigger = true;
        }
    }
    
    //If the view is outside the limits of the room
    if(viewPos &lt; 0) viewPos = 0;
    else if (viewPos &gt; room_width - view_wview) viewPos = room_width -view_wview; 
    
    view_xview = viewPos;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Show camera lines
//Copy this in draw even to see lines
/*draw_line_colour(lBor, 200,lBor, 600, c_white, c_white);
draw_line_colour(rPos, 200, rPos, 600, c_blue, c_blue);
draw_line_colour(lPos, 200, lPos, 600, c_green, c_green);
draw_line_colour(rBor, 200, rBor, 600, c_red, c_red);*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
