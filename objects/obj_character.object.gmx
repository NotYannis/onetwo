<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_red</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_overlay(false);
//Movements variables

hsp = 0;
globalvar vsp;
    vsp = 0;
grav = 1;

// Animation Variables

vColl = false;
hColl = false;
grounded = true;
jumping = false;
walking = false;
gasFilling = false;
hit = false;
invulnerability = 1;
globalvar strike;
    strike = false;
globalvar redprotect;
    redprotect = false;
var zombie;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lighting

if (obj_lighting.dark = true){
    Lighting(360, c_white, c_black);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Protect

if (keyboard_check(vk_numpad3)){
    redprotect = true;
}
else{
    redprotect = false;
}

// Hit
if(place_meeting(x,y,obj_ennemy1)){
    zombie = instance_place(x,y,obj_ennemy1);
    show_debug_message(string(zombie));
    hit = true;
}
if(place_meeting(obj_yellow.x, obj_yellow.y, obj_ennemy1)) {
    zombie = instance_place(obj_yellow.x, obj_yellow.y, obj_ennemy1);
    hit = true;
}

if ( hit &amp;&amp; !strike &amp;&amp; (invulnerability &lt;= 1) &amp;&amp; !instance_exists(obj_magicshield) &amp;&amp; !redprotect){
    life = life-10;
    invulnerability = room_speed*0.9;
    hsp = sign(zombie.image_xscale) * -15;
    vsp = -10;
    grounded = false;
    audio_play_sound(snd_ennemy1_hit, 10, false);
    if(redprotect &amp;&amp; place_meeting(obj_yellow.x, obj_yellow.y, obj_ennemy1)){
        audio_play_sound(snd_shield, 10, false);
    }
}
else if (invulnerability &gt;= 0){
    hit = false;
    invulnerability--;
} 
show_debug_message(string(hit));

if ((place_meeting(x,y,obj_ennemy_shadow)) &amp;&amp; !strike &amp;&amp; (invulnerability &lt;= 1)){
    life = 0;
}


// Death
if (life == 0){
    room_goto(Game_Over);
}


// ------------- Horizontal Mouvements-------------
//-------------------------------------------------

// Move 

if (keyboard_check(vk_right)){
    hsp = 5;
    walking = true;
    image_xscale = 1;
}
else if (keyboard_check(vk_left)){
    hsp = -5;
    walking = true;
    image_xscale = -1;
}

else{
    sprite_index = spr_red;
    image_speed = 0.2;
}

if (((!keyboard_check(vk_left) &amp;&amp; !keyboard_check(vk_right)) || (keyboard_check(vk_left) &amp;&amp; keyboard_check(vk_right))) &amp;&amp; !hit)  {
    hsp = 0;
    walking = false;
}

//----------- Gravity and jump ------------
//-----------------------------------------
if (grounded) { // Player on the ground so he can jump. 
    jumping = false;
    vsp = 0;
    if (keyboard_check(vk_space)){
        jumping = true;
        vsp = -25;
        grounded = false;
    }
}
else{
    vsp += grav;
}
//---------------------------------------
//------------------Animations-----------
//---------------------------------------

if (jumping){
    sprite_index = spr_red_jump;
}
else{
    sprite_index = spr_red
}

if (walking &amp;&amp; !jumping){
    image_speed = 0.5;
    sprite_index = spr_red_walk;
    if (strike){
        walking = false;
        hsp = 0;
        image_speed = 0.5;
        sprite_index = spr_red_hit;
    }
}

if (strike){
    image_speed = 0.5;
    sprite_index = spr_red_hit;
}

if (redprotect){
    sprite_index = spr_red_protect;
}
//---------------------------------------
// --------------Collisions--------------
//---------------------------------------
platform = instance_place(x,y+vsp,obj_platform)

hColl = place_meeting(x+hsp,y,obj_ground01) ;
grounded = place_meeting(x,y+vsp,obj_ground01) || (place_meeting(x,y+vsp,obj_platform) &amp;&amp; vsp &gt;=0)
        &amp;&amp; (platform != noone  &amp;&amp; !place_meeting(x + hsp, y, obj_platform));

// Horizontal
if (hColl) {
    if(!place_meeting(x+sign(hsp),y,obj_ground01)){
        x += sign(hsp);
    }
    hsp = 0;
}


// Vertical
if (grounded) {
    if(!hColl){ //Shouldn't move vertically only if its grounded
        vsp = 0;
    }
}

y += vsp; // Set the variable y, so that the player vertical movements are set. 
x += hsp; // Set the variable x, so that the player can move. 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attack 

if (keyboard_check(vk_numpad1) &amp;&amp; (gasbar &gt; 0) &amp;&amp; !gasFilling){
    if (!audio_is_playing(snd_chainsaw)) audio_play_sound(snd_chainsaw, 10, false);   
    strike = true;    
    gasbar -= 5;
}
else if((!keyboard_check(vk_numpad1) &amp;&amp; gasbar &lt;=100) || gasFilling){
    gasbar += 2;
}

if(gasbar &lt;= 0){ //If the bar hit 0, you can't attack while refilling it to 100
    gasFilling = true;
    strike = false;
}
else if(gasbar &gt;= 100){
    gasFilling = false;
}

if(!keyboard_check(vk_numpad1)){
    strike = false;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
