<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_red</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Movements variables
hsp = 0;
vsp = 0;
grav = 1;
grounded = true;
jumping = false;
walking = false;
canDoubleJump = true;
hColl = false;
walkSpeed = 7;
cantMoveTime = 15;
cantMove = 0;

//Attack and stats
gasFilling = false;
gasbar = 100;
hp = 40;
damage = 10;
gunDamage = 10;
hit = false;
invulnerability = 1;
strike = false;
redprotect = false;
wait = 0;
//View
var lSet, lPos, rSet, rPos;
viewPos = 0;
viewUpdate = true; rTrigger = false; lTrigger = false;
viewLeftLimit = 0;
viewRightLimit = room_width - view_wview;
view_xview = 0;

//Deactivation of arena triggers
globalvar arenaTime;
arenaTime = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lighting and objects activation

if (obj_lighting.dark){
    Lighting(360, c_white, c_black);
}


if(arenaTime){
    instance_activate_region(viewLeftLimit, view_yview, viewRightLimit, view_hview, true);
}
else{
    instance_activate_region(view_xview, view_yview, view_wview, view_hview, true);
    instance_deactivate_object(obj_enemy_trigger);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attack and Hit
if (strikeKey &amp;&amp; gasbar &gt; 0 &amp;&amp; !gasFilling &amp;&amp; !redprotect){
    if (!audio_is_playing(snd_chainsaw)) audio_play_sound(snd_chainsaw, 10, false);   
    strike = true;  
    gasbar -= 5;
    wait = 20;
}
else if((!strikeKey &amp;&amp; gasbar &lt;=100) &amp;&amp; wait ==0 || gasFilling){
    gasbar += 2;
}

if(gasbar &lt;= 0){ //If the bar hit 0, you can't attack while refilling it to 100
    gasFilling = true;
    strike = false;
}
else if(gasbar &gt;= 100) gasFilling = false;
if(!strikeKey){
    strike = false;
}

//Hit
    
//Apply the hit animation, and invulnerability
if (hit &amp;&amp; invulnerability &lt;= 1){
    hp -= damage;
    invulnerability = room_speed*1;

    //Go back in the good direction if there is nothing behind
    if(!place_meeting(x - enemyBehind * 25, y, obj_ground01))
        x -= enemyBehind * 25;
    y -= 25
    
    audio_play_sound(snd_hit, 10, false);

    if(redprotect &amp;&amp; place_meeting(obj_yellow.x, obj_yellow.y, obj_ennemy)){
        audio_play_sound(snd_shield, 10, false);
    }
}
if (invulnerability &gt;= 0){
    if(invulnerability % 6 &gt;= 1 &amp;&amp; invulnerability % 6 &lt;= 3) image_alpha = 0;
    else image_alpha = 1;
    hit = false;
    invulnerability--;
}

if(cantMove &gt; 0){
    cantMove--;
}
if(wait &gt; 0){
    wait --;
}

// Death
if (hp &lt;= 0){
    room_goto(Game_Over);
}

//Cheat code
if(cheatKey) hp += 1000;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement, collisions and animatons

// Move
if(cantMove == 0){
    if(redRightKey){
        hsp = walkSpeed;
        walking = true;
        image_xscale = 1;
    }
    else if(redLeftKey){
        hsp = -walkSpeed;
        walking = true;
        image_xscale = -1;
    }
    
    else{
        sprite_index = spr_red;
        image_speed = 0.2;
    }
    
    if ((!redLeftKey &amp;&amp; !redRightKey) 
        || ((redLeftKey &amp;&amp; redRightKey) || (redprotect &amp;&amp; !jumping))){
        hsp = 0;
        walking = false;
    }
}

//---------------------------------------
//------------------Animations-----------
//---------------------------------------

if (jumping){
    sprite_index = spr_red_jump;
}
else{
    sprite_index = spr_red
}

if (walking &amp;&amp; !jumping){
    image_speed = 0.5;
    sprite_index = spr_red_walk;
    if (strike){
        walking = false;
        hsp = 0;
        image_speed = 0.5;
        sprite_index = spr_red_hit;
    }
}

if (strike){
    image_speed = 0.5;
    sprite_index = spr_red_hit;
}

if (redprotect){
    sprite_index = spr_red_protect;
}

groundCollision(hsp, vsp);
//----------- Gravity and jump ------------
//-----------------------------------------
if (grounded){ // Player on the ground so he can jump. 
    jumping = false;
    vsp = 0;
    if (jumpKey){
        jumping = true;
        vsp = -20;
        grounded = false;
    }
}
else{
    vsp += grav;
}

y += vsp; // Set the variable y, so that the player vertical movements are set.
x += hsp; // Set the variable x, so that the player can move.

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Yellow protection

if (redShieldKey){
    redprotect = true;
}
else{
    redprotect = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///View instanciation
/*if(viewUpdate){
    lBor = view_xview + (view_wview / 2 - 150); //Left limit, when the camera reposition itself
    lPos = view_xview + (view_wview / 2 + 100); //Position of the camera when the player walks to the left
    rBor = view_xview + (view_wview / 2 + 150); //Right limit, when the camera reposition itself
    rPos = view_xview + (view_wview / 2 - 100); //Position of the camera when the player walks to the right
    if(x &gt; rPos &amp;&amp; rTrigger) viewPos += 20;
    else rTrigger = false;
    if(x &lt; lPos &amp;&amp; lTrigger) viewPos -= 20;
    else lTrigger = false;
}

//View behaviour, depend of the direction of the player
if (redRightKey){
    if(x &gt;= rPos - walkSpeed*3 &amp;&amp; x &lt;= rPos + walkSpeed*3){
        viewUpdate = true;
        rTrigger = false;
        viewPos = x - (view_wview / 2 - 100);
    }
    else if(x &gt;= rBor){//Touch the right trigger, put camera to rPos 
        rTrigger = true
    }
}
else if (redLeftKey){
    if(x &gt;= lPos - walkSpeed*3 &amp;&amp; x &lt;= lPos + walkSpeed*3){
        viewUpdate = true;
        lTrigger = false;
        viewPos = x - (view_wview / 2 + 100);
    }
    else if(x &lt;= lBor){
        lTrigger = true;
    }
}
*/

//If the view is outside the limits of the room
if(x - view_wview/2 &lt; viewLeftLimit ||
    (arenaTime &amp;&amp; (viewRightLimit - viewLeftLimit &lt; view_wview))){
    viewPos = viewLeftLimit;
    //lTrigger = false;
}
else if (x - view_wview/2 &gt; viewRightLimit){
    viewPos = viewRightLimit; 
    //rTigger = false;
}
else{
    viewPos = x - view_wview/2;
}

view_xview = viewPos;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Show camera lines
//Copy this in draw even to see lines
/*draw_line_colour(lBor, 200,lBor, 600, c_white, c_white);
draw_line_colour(rPos, 200, rPos, 600, c_blue, c_blue);
draw_line_colour(lPos, 200, lPos, 600, c_green, c_green);
draw_line_colour(rBor, 200, rBor, 600, c_red, c_red);*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
